// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: booking.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookingService_AddAvailability_FullMethodName     = "/pbB.BookingService/AddAvailability"
	BookingService_ViewAvailability_FullMethodName    = "/pbB.BookingService/ViewAvailability"
	BookingService_BookAppoinment_FullMethodName      = "/pbB.BookingService/BookAppoinment"
	BookingService_ViewAppointment_FullMethodName     = "/pbB.BookingService/ViewAppointment"
	BookingService_UserViewAppointment_FullMethodName = "/pbB.BookingService/UserViewAppointment"
	BookingService_ViewAllAppointment_FullMethodName  = "/pbB.BookingService/ViewAllAppointment"
	BookingService_CancelAppointment_FullMethodName   = "/pbB.BookingService/CancelAppointment"
	BookingService_AddPrescription_FullMethodName     = "/pbB.BookingService/AddPrescription"
	BookingService_ViewPrescription_FullMethodName    = "/pbB.BookingService/ViewPrescription"
	BookingService_CreatePayment_FullMethodName       = "/pbB.BookingService/CreatePayment"
	BookingService_UserPaymentSuccess_FullMethodName  = "/pbB.BookingService/UserPaymentSuccess"
	BookingService_GenerateAppointment_FullMethodName = "/pbB.BookingService/GenerateAppointment"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	AddAvailability(ctx context.Context, in *Availability, opts ...grpc.CallOption) (*Response, error)
	ViewAvailability(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*AvailabilityListResponse, error)
	BookAppoinment(ctx context.Context, in *Appoinment, opts ...grpc.CallOption) (*Response, error)
	ViewAppointment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AppointmentList, error)
	UserViewAppointment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AppointmentList, error)
	ViewAllAppointment(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*ViewAppointmentList, error)
	CancelAppointment(ctx context.Context, in *Cancelappointmentreq, opts ...grpc.CallOption) (*Response, error)
	AddPrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*Response, error)
	ViewPrescription(ctx context.Context, in *Req, opts ...grpc.CallOption) (*PrescriptionListResponse, error)
	CreatePayment(ctx context.Context, in *ConfirmAppointment, opts ...grpc.CallOption) (*PaymentResponse, error)
	UserPaymentSuccess(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*PaymentStatusResponse, error)
	GenerateAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*AppointmentResultResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) AddAvailability(ctx context.Context, in *Availability, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BookingService_AddAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) ViewAvailability(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*AvailabilityListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailabilityListResponse)
	err := c.cc.Invoke(ctx, BookingService_ViewAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) BookAppoinment(ctx context.Context, in *Appoinment, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BookingService_BookAppoinment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) ViewAppointment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AppointmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppointmentList)
	err := c.cc.Invoke(ctx, BookingService_ViewAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UserViewAppointment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AppointmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppointmentList)
	err := c.cc.Invoke(ctx, BookingService_UserViewAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) ViewAllAppointment(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*ViewAppointmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewAppointmentList)
	err := c.cc.Invoke(ctx, BookingService_ViewAllAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CancelAppointment(ctx context.Context, in *Cancelappointmentreq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BookingService_CancelAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) AddPrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BookingService_AddPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) ViewPrescription(ctx context.Context, in *Req, opts ...grpc.CallOption) (*PrescriptionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrescriptionListResponse)
	err := c.cc.Invoke(ctx, BookingService_ViewPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CreatePayment(ctx context.Context, in *ConfirmAppointment, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, BookingService_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UserPaymentSuccess(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*PaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentStatusResponse)
	err := c.cc.Invoke(ctx, BookingService_UserPaymentSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GenerateAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*AppointmentResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppointmentResultResponse)
	err := c.cc.Invoke(ctx, BookingService_GenerateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility.
type BookingServiceServer interface {
	AddAvailability(context.Context, *Availability) (*Response, error)
	ViewAvailability(context.Context, *NoParam) (*AvailabilityListResponse, error)
	BookAppoinment(context.Context, *Appoinment) (*Response, error)
	ViewAppointment(context.Context, *ID) (*AppointmentList, error)
	UserViewAppointment(context.Context, *ID) (*AppointmentList, error)
	ViewAllAppointment(context.Context, *NoParam) (*ViewAppointmentList, error)
	CancelAppointment(context.Context, *Cancelappointmentreq) (*Response, error)
	AddPrescription(context.Context, *Prescription) (*Response, error)
	ViewPrescription(context.Context, *Req) (*PrescriptionListResponse, error)
	CreatePayment(context.Context, *ConfirmAppointment) (*PaymentResponse, error)
	UserPaymentSuccess(context.Context, *Payment) (*PaymentStatusResponse, error)
	GenerateAppointment(context.Context, *AppointmentID) (*AppointmentResultResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookingServiceServer struct{}

func (UnimplementedBookingServiceServer) AddAvailability(context.Context, *Availability) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAvailability not implemented")
}
func (UnimplementedBookingServiceServer) ViewAvailability(context.Context, *NoParam) (*AvailabilityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAvailability not implemented")
}
func (UnimplementedBookingServiceServer) BookAppoinment(context.Context, *Appoinment) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookAppoinment not implemented")
}
func (UnimplementedBookingServiceServer) ViewAppointment(context.Context, *ID) (*AppointmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAppointment not implemented")
}
func (UnimplementedBookingServiceServer) UserViewAppointment(context.Context, *ID) (*AppointmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserViewAppointment not implemented")
}
func (UnimplementedBookingServiceServer) ViewAllAppointment(context.Context, *NoParam) (*ViewAppointmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllAppointment not implemented")
}
func (UnimplementedBookingServiceServer) CancelAppointment(context.Context, *Cancelappointmentreq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (UnimplementedBookingServiceServer) AddPrescription(context.Context, *Prescription) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrescription not implemented")
}
func (UnimplementedBookingServiceServer) ViewPrescription(context.Context, *Req) (*PrescriptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPrescription not implemented")
}
func (UnimplementedBookingServiceServer) CreatePayment(context.Context, *ConfirmAppointment) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedBookingServiceServer) UserPaymentSuccess(context.Context, *Payment) (*PaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPaymentSuccess not implemented")
}
func (UnimplementedBookingServiceServer) GenerateAppointment(context.Context, *AppointmentID) (*AppointmentResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAppointment not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}
func (UnimplementedBookingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_AddAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Availability)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AddAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AddAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AddAvailability(ctx, req.(*Availability))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_ViewAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ViewAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ViewAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ViewAvailability(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_BookAppoinment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appoinment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).BookAppoinment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_BookAppoinment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).BookAppoinment(ctx, req.(*Appoinment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_ViewAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ViewAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ViewAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ViewAppointment(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UserViewAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UserViewAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_UserViewAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UserViewAppointment(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_ViewAllAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ViewAllAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ViewAllAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ViewAllAppointment(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cancelappointmentreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CancelAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CancelAppointment(ctx, req.(*Cancelappointmentreq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_AddPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AddPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AddPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AddPrescription(ctx, req.(*Prescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_ViewPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ViewPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ViewPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ViewPrescription(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAppointment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreatePayment(ctx, req.(*ConfirmAppointment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UserPaymentSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UserPaymentSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_UserPaymentSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UserPaymentSuccess(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GenerateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GenerateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GenerateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GenerateAppointment(ctx, req.(*AppointmentID))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbB.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAvailability",
			Handler:    _BookingService_AddAvailability_Handler,
		},
		{
			MethodName: "ViewAvailability",
			Handler:    _BookingService_ViewAvailability_Handler,
		},
		{
			MethodName: "BookAppoinment",
			Handler:    _BookingService_BookAppoinment_Handler,
		},
		{
			MethodName: "ViewAppointment",
			Handler:    _BookingService_ViewAppointment_Handler,
		},
		{
			MethodName: "UserViewAppointment",
			Handler:    _BookingService_UserViewAppointment_Handler,
		},
		{
			MethodName: "ViewAllAppointment",
			Handler:    _BookingService_ViewAllAppointment_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _BookingService_CancelAppointment_Handler,
		},
		{
			MethodName: "AddPrescription",
			Handler:    _BookingService_AddPrescription_Handler,
		},
		{
			MethodName: "ViewPrescription",
			Handler:    _BookingService_ViewPrescription_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _BookingService_CreatePayment_Handler,
		},
		{
			MethodName: "UserPaymentSuccess",
			Handler:    _BookingService_UserPaymentSuccess_Handler,
		},
		{
			MethodName: "GenerateAppointment",
			Handler:    _BookingService_GenerateAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking.proto",
}
